<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.dongmul.story.review.ReviewMAP">

	<!-- 리뷰 add Page (Check author)-->
	<select id="getOrderDetail" parameterType="Integer" resultType="map">
		SELECT * FROM ordertb WHERE orderNum = #{orderNum}
	</select>

	<!-- 리뷰 등록 -->
	<insert id="addAndGetKey" useGeneratedKeys="true" keyProperty="num" parameterType="com.dongmul.story.review.Review">
		INSERT INTO review
			(reviewNum, reviewItemNum, reviewTitle, reviewUserId, reviewDate, reviewContents, reviewGrade, reviewOrderNum)
		VALUES
			(null, #{itemNum}, SUBSTRING(#{contents}, 1, 10), #{userId}, CURDATE(), #{contents}, #{grade}, #{orderNum})
	</insert>
	
	<!-- 리뷰 등록(파일 첨부) -->
	<insert id="addRfile" parameterType="java.util.List"> 
		INSERT INTO rfile 
			(rfileNum, rfileReviewNum, rfileName, rfileFakeName, rfileType) 
		VALUES 
		<foreach collection="list" item="rfile" separator=", ">
			(null, #{rfile.reviewNum}, #{rfile.name}, #{rfile.fakeName}, #{rfile.type})
		</foreach>
	</insert>
	
	<!-- 리뷰 목록 - 아이템 -->
	<select id="getList" parameterType="Integer" resultType="map">
		SELECT r.*,
			i.itemName AS itemName,
		CASE
		    WHEN COUNT(rf.rfileFakeName) = 1 THEN MAX(rf.rfileFakeName)
		    ELSE SUBSTRING_INDEX(GROUP_CONCAT(rf.rfileFakeName), ',', 1)
		END AS ShowFile
		FROM review r
		LEFT OUTER JOIN rfile rf ON rf.rfileReviewNum = r.reviewNum
		LEFT OUTER JOIN item i ON r.reviewItemNum = i.itemNum
		WHERE r.reviewItemNum = #{itemNum}
		GROUP BY r.reviewNum
		ORDER BY r.reviewDate DESC
	</select>
	
	<!-- 리뷰 목록 - 관리자 -->
	<select id="getAdminList" resultType="map">
	    SELECT r.*,
		CASE
	        WHEN COUNT(rf.rfileFakeName) = 1 THEN MAX(rf.rfileFakeName)
	        ELSE SUBSTRING_INDEX(GROUP_CONCAT(rf.rfileFakeName), ',', 1)
	    END AS ShowFile,
	    i.itemName AS itemName
		FROM review r
		LEFT OUTER JOIN rfile rf 
        ON rf.rfileReviewNum = r.reviewNum
        LEFT OUTER JOIN item i ON r.reviewItemNum = i.itemNum
		GROUP BY r.reviewNum
		ORDER BY r.reviewDate DESC
	</select>
	
	<!-- 리뷰 목록 - 유저 -->
	<select id="getUserList" parameterType="String" resultType="map">
		SELECT r.*,
		CASE
			WHEN COUNT(rf.rfileFakeName) = 1 THEN MAX(rf.rfileFakeName)
			ELSE SUBSTRING_INDEX(GROUP_CONCAT(rf.rfileFakeName), ',', 1)
		END AS ShowFile,
		i.itemName AS itemName
		FROM review r
		LEFT OUTER JOIN rfile rf ON rf.rfileReviewNum = r.reviewNum
		LEFT OUTER JOIN item i ON r.reviewItemNum = i.itemNum
		WHERE r.reviewUserId = #{userId}
		GROUP BY r.reviewNum
		ORDER BY r.reviewDate DESC
	</select>
	
	<!-- 상세보기 - 주문번호 -->
	<select id="getReview" parameterType="Integer" resultType="java.util.Map">
		SELECT r.*, GROUP_CONCAT(rf.rfileFakeName SEPARATOR ',') AS rfileFakeNames, i.itemName
		FROM review r
		LEFT OUTER JOIN rfile rf ON r.reviewNum = rf.rfileReviewNum
		LEFT OUTER JOIN item i ON r.reviewItemNum = i.itemNum
		WHERE r.reviewOrderNum = #{orderNum}
		GROUP BY r.reviewNum
	</select>
	
	<!-- 상세보기 - 상품번호 -->
	<select id="getReview2" parameterType="Integer" resultType="java.util.Map">
		SELECT r.*, GROUP_CONCAT(rf.rfileFakeName SEPARATOR ',') AS rfileFakeNames
		FROM review r
		LEFT OUTER JOIN rfile rf ON r.reviewNum = rf.rfileReviewNum
		WHERE r.reviewNum = #{reviewNum}
		GROUP BY r.reviewNum
	</select>

	<!-- 리뷰 수정 -->
	<update id="update" parameterType="com.dongmul.story.review.Review">
		UPDATE review SET 
			reviewTitle=SUBSTRING(#{contents}, 1, 10),
			reviewContents=#{contents},
			reviewGrade=#{grade}
		WHERE reviewNum=#{num}
	</update>
	
	<!-- 리뷰 삭제 -->
	<delete id="deleteReview" parameterType="Integer">
		DELETE FROM review WHERE reviewNum=#{reviewNum}
	</delete>
	
	<!-- 리뷰 파일 삭제 -->
	<delete id="deleteFile" parameterType="String">
		DELETE FROM rfile WHERE rfileFakeName=#{rfileFakeName}
	</delete>
	
</mapper>        
